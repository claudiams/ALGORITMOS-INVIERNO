
#include "stdafx.h"
#include <iostream>

#define N 30
#define M 30


using namespace std;

void mostrar(int mat[N][M], int n){
	int i,j;
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			cout<<mat[i][j]<<" ";
				}
		cout<<endl;
	}
	cout<<endl;
}

void cargar(int mat[N][N], int &n)
{
	int i,j;
	cout << "Ingrese el orden la Matriz";\
	cin >> n;
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			cout<<"Introduzca elemento para mat["<<i<<"]["<<j<<"]: ";
			cin>>mat[i][j];
		}
	}
}
void sumarMatrices (int A [N][M], int B [N][M], int n, int C[N][M]){
	int i,j;
	for(i=0; i<n; i++){
		for(j=0; j<n ; j++){
			C[i][j]= A[i][j]+B[i][j];
		}
	}
}


void restarMatrices (int A [N][M], int B [N][M], int n, int C[N][M])
{
for (i=0; i<n; i++)
				for (j=0; j<n ; j++)
					C[i][j] = A[i][j] - B[i][j];

}

void multiplicarMatrices (int A [N][M], int B [N][M], int n, int C[N][M])
{

	for (i=0; i<n; i++)
			{
				for (j=0; j<n ; j++)
				{
					aux = 0;
					for (k =0 ; k < n ; k++)
					{
						aux  = aux + ( A[i][j] * B[i][j] );

					}
					 C[i][j] =  aux;	
				}
			}
}





void multiplicarMatriz_Entero (int A [N][M], int n, int C[N][M], ent)
{
	for (i=0; i<n; i++)
				for (j=0; j<n ; j++)
					C[i][j] = A [i][j] * ent; 


}

void OrdAsc_Matriz (float Matriz[N][M],int n,)
{
int i,j,k,l;
  while ( i<n;)
			{
				i=0;
				while (j<n )
				{
					j=0;
					while ( k=i ; k< n ; k++)
					{
						k=0;
						while ( l=j; l< n; l++)
						{
							l=0;
							if(A[i][j]>A[k][l])
							{
								aux = A[i][j];
								A[k][l] = A[i][j];
								A[i][j] = aux;
							}
							l++;
						}
						k++;
					}
					j++;
				}
				i++;
			}
    
}



void MatTransp(float M[N][M], int n)
{
    for(int i=0;i<n;i++)
        for(int j=i;j<n;j++)
            swap (M[i][j],M[j][i]);
}

void Print_M(float M[N][M], int n, int m)
{
    
   for(int i=0;i<n;i++)
   {
       for(int j=0;j<m;j++)
           cout << M[i][j]<<" ";
       cout << endl;
    }
    
}

float DetDosxDos_M(float M[N][M])
{
    int i=0,j=1;
    float det;
    det = (float)(M[i][i]*M[j][j])-(M[i][j]*M[j][i]);
    return det;
    
}


void ElimNM(float M[N][M], float C[N][M], int n, int k, int l)
{
    for(int i=0,p=0;i<n;p++,i++)
    {
        if(i==k)
        {
            i++;
        }
        for(int j=0,q=0;j<n;q++,j++)
        {
            if(j==l)
            {
                j++;
            }
            C[p][q]=M[i][j];
        }

    }
    
}


void MatrizAdj (float M[N][M],float F[N][M], int n)
{
    float c[N][M];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            
            ElimNM(M, c, n, i, j);
            F[i][j]=DetDosxDos_M(c)*pow(-1, i+j);
            
        }
    }
}

 float Determ (float M[N][M], int n)
{
    int i=1,j;
    float det=0, F[N][M];
    MatrizAdj(M, F,n);
    for(j=0;j<n;j++)
        det = det + M[i][j]*F[i][j];
    return det;
    
}



while (i=0; i<n; i++)
			{
				i=0;
				while ( j<n )
				{
					j=i+1;
					if(j>i)
					{
						aux = A[i][j];
						A[i][j] = A[j][i];
						A[j][i] = aux;
					}
					j++;
				}
				i++;
			}
					
