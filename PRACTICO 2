PRACTICO 2
1.-

int Frecuencia (int a[],int n, int k)
{
    int c=0;
    for(int i=0;i<n;i++)
    {
        if(a[i]==k)
            c++;
    }
    
    return c;
    
}

2.-

void ElimDig_V(int a[],int &n,int k)
{
    for(int i=0;i<n;i++)
        if(a[i]==k)
        {
            n--;
            for(int j=i;j<n;j++)
            {
                a[j]=a[j+1];
            }
        }
    
}


   
}

3.-
int BuscarElem_v(int a[], int n, int k)
{
    int p=-1;
    for(int i=0;i<n;i++)
    {
        if(a[i]==k)
            p=i;
        

    }
    return p;   
}


4.- 

void Invertir_v(int a[],int n)
{
    for(int i=0;i<n/2;i++)
    {
        swap(a[i],a[n-1-i]);
    }
    
    
}


void Print_V(int a[], int n)

{
    for(int i=0;i<n;i++)
        cout << a[i]<< endl;
}

4.- void Suma_Cruzada(int a[],int b[], int c[], int n)
{
    Invertir_v(b, n);
    for(int i=0;i<n;i++)
    {
        c[i]=a[i]+b[i];
    }
    
}

5.-  void InsertDig_V(int a[], int &n, int k, int p)
{
    for(int i=0;i<n;i++)
        if(i==p)
        {
            n++;
            for(int j=n-1;j>=i;j--)
                a[j]=a[j-1];
            a[i]=k;
        }
}



6.- void Perm_Ciclica(int a[],int n)
{
    int aux=a[0];
    for(int i=0;i<n-1;i++)
        
        a[i]=a[i+1];
    a[n-1]=aux;
   
    
    
}


7.-

int InvertN(int n)
{
    int r,s=0;
    while(n>0)
    {
        r=n%10;
        s=s*10+r;
        n=n/10;
    }
    return s;
}


void CuadInv_V(int a[],int n)
{
    for(int i=1;i<=n;i++)
    {
        a[i-1]=InvertN(i*i);
    }
    
}


8.-

void SumaDigAnt_V(int a[], int n)
{
    int s=0;
    a[0]=1;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            
            s=s+SumaDig(a[j]);
        }
        a[i]=s;
        s=0;
    }
    
}

int SumaDig(int n)

{
    int r,s=0;
    while(n>0)
    {
        
        r=n%10;
        s=s+r;
        n=n/10;
    }
    return s;
}


9.-

void SumaDigAntCra_V(int a[], int n)
{
    int s=0;
    a[0]=1;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            
            s=s+a[j];
        }
        a[i]=Crapulo(s);
        s=0;
        
    }
    
    
}


10.-
void UnirVRep(int a[], int b[],int c[], int n, int m)
{
    int i,j;
    for(i=0;i<n;i++)
        c[i]=a[i];
    for (i=0,j=n;i<m;j++,i++)
        c[j]=b[i];
    
}

void ElimRep_V (int a[], int &n)
{
    for (int i=0;i<n-1;i++)
        for(int j=i+1;j<n;j++)
            if(a[i]==a[j])
            {
                n--;
                for(int k=j;k<n;k++)
                    a[k]=a[k+1];
            }
    
}

11.-

void Fibo(int a[], int n)
{
    a[0]=1;
    a[1]=1;
    for(int i=2;i<n;i++)
        a[i]=a[i-1]+a[i-2];
    
}

void Print_V(int a[], int n)

{
    for(int i=0;i<n;i++)
        cout << a[i]<< endl;
}


void Primo_V(int a[], int m)
{
    int i, k=1, n=1,l=0;
    
    while(l<=m)
    {
        for(i=2;i<n;i++)
        {
            if(n%i==0)
                k++;
            
        }
        if(k==1)
        {
            a[l]=n;
            l++;
        }
        n++;
        k=1;
    }
}



12.-


int ElimPares(int a)
{
    int r, c=0, s=0;
    while(a>0)
    {
        r=a%10;
        a=a/10;
        if(r%2!=0)
        {
            s=s+(r*pow(10,c));
            c++;
        }
        
    }
    return s;
}


void ElimPares_V(int a[], int b[], int n)
{
    for(int i=0;i<n;i++)
        b[i]= ElimPares(a[i]);
    
    
}


13.-



int ElimPares(int a)
{
    int r, c=0, s=0;
    while(a>0)
    {
        r=a%10;
        a=a/10;
        if(r%2!=0)
        {
            s=s+(r*pow(10,c));
            c++;
        }
        
    }
    return s;
}


void ElimPares_V(int a[], int b[], int n)
{
    for(int i=0;i<n;i++)
        b[i]= ElimPares(a[i]);
    
    
}
