Practico 1


1.-

# include "stdafx.h"
# include <iostream>


using namespace std;

int ContarDig (int n);
int POTEN (int a, int b);


int main ()
{
    int n1,n2,aux,n;
    
    cout << "Digite 2 numeros: ";
    cin >> n1 >> n2;
    
    if(n1<n2)
    {
        aux = n1;
        n1 = n2;
        n2 = aux;
    }
    
    n = (n2*POTEN(10, ContarDig(n1)))+n1;
    
    cout << "El numero concadenado es: " << n<< endl;
    
    
    return 0;
}

int ContarDig (int n)
{
    
    int i=0;
    while(n>10)
    {
        n = n/10;
        i++;
        
    }
    return i;
    
}

int POTEN (int a, int b)
{
    int i, p;
    
    for (i=1,p=1;i<=b;p*=a,i++);
    
    return p;
}


2.-

# include "stdafx.h"
# include <iostream>
# include <math.h>

using namespace std;

int ElimRep(int n);

int main ()
{
    int n1,n2;
    cout << "Digite un numero: ";
    cin >> n1;
    n2=ElimRep(n1);
    cout << "El numero con digitos repetidos eliminados es: " << n2 << endl;
    
    return 0;
}

int ElimRep(int n)
{
    int i, j, r1,r2,c=0, k=0,s=0;
    i=n;
    j=n;
    while(i>0)
    {
        r1=i%10;
        while(j>0)
        {
            r2=j%10;
            j=j/10;
            if(r1==r2)
                k++;
        }
        if(k==1)
        {
            s=s+(r1*pow(10,c));
            c++;
        }
        i=i/10;
        k=0;
        j=n;
    }
    
    return s;
    
}


3.-
# include "stdafx.h"
# include <iostream>


using namespace std;

int InvertN(int n);

int main ()
{
    int n, x ;
    
    cout << "Digite el numero a invertir: ";
    cin >> n;
    x=InvertN(n);
    cout << "El numero invertido es : " << x << endl;
    
    return 0;
}

int InvertN(int n)
{
    int r,s=0;
    while(n>0)
    {
        r=n%10;
        s=s*10+r;
        n=n/10;
    }
    return s;
}

4.-


# include "stdafx.h"
# include <iostream>
# include <math.h>

using namespace std;

int Mayor (int n);
int Elim_Num(int n, int e);

int main ()
{
    int n1, n2, m ;
    
    cout << "Digite un numero: ";
    cin >> n1;
    
    m = Mayor(n1);
    n2 = Elim_Num(n1, m);
    
    cout << "El numero es : " << n2 << endl;
    
    return 0;
}

int Mayor (int n)
{
    int r, mayor=0;
    while(n>0)
    {
        r=n%10;
        n=n/10;
        if(mayor<r)
            mayor=r;
    }
    return mayor;
}

int Elim_Num(int n, int e)
{
    int s=0,c=0,r;
    while(n>0)
    {
        r=n%10;
        n=n/10;
        if(e!=r)
        {
            s=s+(r*pow(10,c));
            c++;
        }
        
    }
    return s;
}



5.-

int InsertDig (int n, int p, int ni)
{
    int s=0,i=0, r;
    while(n>0)
    {
        r=n%10;
        s=s+(r*pow(10,i));
        n=n/10;
        if(p==i+1)
        {
            s=s+(ni*pow(10,p));
            i++;
            
        }
        
        i++;
    }
    return s;
    
}

6.-

# include <iostream>
# include "stdafx.h"

using namespace std;

int InvertN(int n);
bool Capicua(int n);


int main ()
{
    int n1;
    
    cout << "Digite un numero: ";
    cin >> n1;
    
    if(Capicua(n1))
        cout << "El numero si es capicua"<< endl;
    else
        cout <<"El numero no es capicua" << endl;
   
    
    return 0;
}

int InvertN(int n)
{
    int r,s=0;
    while(n>0)
    {
        r=n%10;
        s=s*10+r;
        n=n/10;
    }
    return s;
}


bool Capicua(int n)
{
    bool k= false;
    int ninv;
    
    ninv = InvertN(n);
    if(n==ninv)
        k=true;
    return k;
    
}



9.-

# include "stdafx.h"
# include <iostream>

using namespace std;

int Crapulo (int n);

int main ()
{
    int n1, n2 ;
    
    cout << "Digite un numero: ";
    cin >> n1;
    
    n2 = Crapulo(n1);

    cout << "El numero es : " << n2 << endl;

    
    return 0;
}

int Crapulo (int n)
{
    int r,s=n;
    while(s>9)
    {
        n=s;
        s=0;
        while(n>0)
        {
            r=n%10;
            s=s+r;
            n=n/10;
        }
    }
    
    return s;
    
}


10.-

# include "stdafx.h"
# include <iostream>
# include <math.h>

using namespace std;

void automorfico(int n);
int ContarDig (int n);

int main ()
{
    
    automorfico(1000);
    
    return 0;
}

void automorfico(int n)
{
    int numdig, i, j, r, c, s=0;
    
    for(i=1;i<n;i++)
    {
        numdig=ContarDig(i);
        c=i*i;
        for(j=0,s=0;j<numdig;j++)
        {
            r=c%10;
            s=s+(r*pow(10,j));
            c=c/10;
        }
        if(i==s)
            cout << i<< endl;
    }
}

int ContarDig (int n)
{
    int i=1;
    while(n>10)
    {
        n = n/10;
        i++;
    }
    return i;
}

11.-

# include "stdafx.h"
# include <iostream>

using namespace std;

void MultTres (int n);

int main ()
{
    MultTres(12);
    
    return 0;
}

void MultTres (int n)
{
    int i, m3;
    for(i=1;i<=n;i++)
    {
        m3 = i*3;
        cout << m3 << endl;
        
    }
}


12.-

# include "stdafx.h"
# include <iostream>

using namespace std;

int InvertN(int n);
void CuadInv_V(int n);

int main ()
{
    int n;
    cout << "Ingrese el numero limite: " ;
    cin >> n;
    CuadInv_V(n);
    
    return 0;
}

int InvertN(int n)
{
    int r,s=0;
    while(n>0)
    {
        r=n%10;
        s=s*10+r;
        n=n/10;
    }
    return s;
}


void CuadInv_V(int n)
{
    int ni;
    for(int i=1;i<=n;i++)
    {
        ni=InvertN(i*i);
        cout << ni << endl;
    }
    
}

13.-

# include "stdafx.h"
# include <iostream>

#define max 100

using namespace std;

void SumaDigAnt_V(int a[], int n);
int SumaDig(int n);
void Print_V(int a[], int n);

int main ()
{
    int n,a[max];
    cout << "Ingrese el numero limite: " ;
    cin >> n;
    
    SumaDigAnt_V(a, n);
    Print_V(a, n);

    return 0;
}

void SumaDigAnt_V(int a[], int n)
{
    int s=0;
    a[0]=1;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            
            s=s+SumaDig(a[j]);
        }
        a[i]=s;
        s=0;
    }
    
}

int SumaDig(int n)

{
    int r,s=0;
    while(n>0)
    {
        
        r=n%10;
        s=s+r;
        n=n/10;
    }
    return s;
}

void Print_V(int a[], int n)

{
    for(int i=0;i<n;i++)
        cout << a[i]<< endl;
}




14.- 

# include "stdafx.h"
# include <iostream>

#define max 100

using namespace std;

int Crapulo (int n);
void SumaDigAntCra_V(int a[], int n);
void Print_V(int a[], int n);

int main ()
{
    int n,a[max];
    cout << "Ingrese el numero limite: " ;
    cin >> n;
    
    SumaDigAntCra_V(a, n);
    Print_V(a, n);
    
    return 0;
}

void SumaDigAntCra_V(int a[], int n)
{
    int s=0;
    a[0]=1;
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            
            s=s+a[j];
        }
        a[i]=Crapulo(s);
        s=0;
        
    }
    
    
}


int Crapulo (int n)
{
    int r,s=n;
    while(s>9)
    {
        n=s;
        s=0;
        while(n>0)
        {
            r=n%10;
            s=s+r;
            n=n/10;
        }
    }
    
    return s;
    
}

void Print_V(int a[], int n)

{
    for(int i=0;i<n;i++)
        cout << a[i]<< endl;
}




STRING 

11.- 

# include "stdafx.h"
# include <iostream>
# include <string>

using namespace std;

string Invertir_S(string str);

int main ()
{
    string str = "hola";
    
   cout <<  Invertir_S(str) << endl;
    
    
    return 0;
}


string Invertir_S(string str)
{
    long tam;
    tam = str.length();
    for(int i=0; i<tam/2 ; i++ )
    {
        swap (str.at(i), str.at(tam-1-i));
    }
    
    return str;
    
    
}


12.-


# include "stdafx.h"
# include <iostream>
# include <string>

using namespace std;

bool Palindromo_S( string str);

int main ()
{
    string str = "oruro";
    
    if(Palindromo_S(str))
        cout << "Si es palindromo" << endl;
    else
        cout << "No es palindromo" << endl;
    
   
    
    
    return 0;
}


bool Palindromo_S( string str)
{
    bool k= true;
    long tam;
    tam = str.length();
    for(int i=0;i<tam/2;i++)
        if(str.at(i)!=str.at(tam-i-1))
            k = false;
    return k;

}

13.-

# include "stdafx.h"
# include <iostream>
# include <string>

using namespace std;

int Minusculas_S (string str);

int main ()
{
    string str = "Feliz Cumplea単os";
    
    cout << Minusculas_S(str) << endl;
   
    
    
    return 0;
}


int Minusculas_S (string str)
{
    long tam;
    int c=0;
    tam = str.length();
    
    for(int i=0; i<tam ;i++)
        if(((str.at(i))>='a')&&((str.at(i))<='z'))
            c++;
    
    return c;
}

14.-


# include "stdafx.h"
# include <iostream>
# include <string>

using namespace std;

int Mayusculas_S (string str);

int main ()
{
    string str = "Feliz Cumplea単os";
    
    cout << Mayusculas_S(str) << endl;
   
    
    
    return 0;
}


int Mayusculas_S (string str)
{
    long tam;
    int c=0;
    tam = str.length();
    
    for(int i=0; i<tam ;i++)
        if(((str.at(i))>='A')&&((str.at(i))<='Z'))
            c++;
    
    return c;
}
15.-

# include "stdafx.h"
# include <iostream>
# include <string>

using namespace std;

int FrecChar_S (string str, char ch);

int main ()
{
    string str = "Feliz Cumplea単os";
    
    cout << FrecChar_S(str, 'e') << endl;
   
    
    
    return 0;
}


int FrecChar_S (string str, char ch)
{
    long tam;
    int c=0;
    tam = str.length();
    
    for(int i=0; i<tam ;i++)
        if(str.at(i)==ch)
            c++;
    
    return c;
}

16.-


# include "stdafx.h"
# include <iostream>
# include <string>

using namespace std;

string ConvMinus_S (string str);

int main ()
{
    string str = "Feliz Cumplea単os";
    
    cout << ConvMinus_S(str) << endl;
   
    
    
    return 0;
}


string ConvMinus_S (string str)
{
    
    long tam;
    tam =str.length();
    
    for(int i=0 ; i< tam ;i++)
    {
        str.at(i) = tolower(str.at(i));
        
    }
    
    return str;
}


17.-

# include "stdafx.h"
# include <iostream>
# include <string>
# include "math.h"

using namespace std;

int ConvBr_Bd(int nr, int r);

int ConvBd_Br(int n10, int r);

int main ()
{
  
    
    cout << ConvBr_Bd(1000, 2) << endl;
    cout << ConvBd_Br(8, 2);

    
    return 0;
}


int ConvBr_Bd(int nr, int r)
{
    int n10=0, i=0;
    
    while (nr>0)
    {
        n10 = n10 + (nr%10)*(pow(r, i));
        nr=nr/10;
        i++;
    }
    
    return n10;
    
}


int ConvBd_Br(int n10, int r)
{
    int i = 0, nr=  0;
    
    while(n10>0)
    {
        
        nr = nr + (n10%r)*(pow(10, i));
        n10=n10/r;
        i++;
        
    }
    
    return nr;
}

